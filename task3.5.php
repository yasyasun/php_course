<?php
// Задача 1: Создание простого массива
// Создайте массив с именами нескольких ваших друзей и выведите его на экран.
// Задача:
// 1. Создайте массив с как минимум 4 именами.
// 2. Выведите каждое имя на новой строке.
// Подсказка:
// Используйте простой массив и цикл foreach для вывода элементов.

$friends = ['Yulya', 'Irina', 'Dasha', 'Aleksei', 'Inna', 'Oleg'];
foreach ($friends as $friend) {
    echo $friend . "\n";
}

// Задача 2: Индексы массива
// Создайте массив чисел и получите значение элемента по индексу.
// Задача:
// 1. Создайте массив из 5 произвольных чисел.
// 2. Выведите на экран элемент с индексом 2.
// Подсказка:
// Используйте нумерацию индексов массива (индексация начинается с 0).

$nums = [1, 2, 3, 4, 5, 6];
echo $nums[2] . "\n";

// Задача 3: Ассоциативный массив
// Создайте ассоциативный массив, который будет содержать информацию о вашем друге: имя,
// возраст и город.
// Задача:
// 1. Создайте массив с ключами name , age и city .
// 2. Выведите на экран имя и возраст друга.
// Подсказка:
// Используйте ассоциативный массив, где ключи — это строковые значения, например, name
// => "Иван" .

$friend_info = [
    'name' => 'ALex',
    'age' => 32,
    'city' => 'Moscow'
]; 
echo "Name: {$friend_info['name']} Age: {$friend_info['age']}\n";

// Задача 4: Массивы с циклами
// У вас есть массив чисел. Выведите все числа из массива, которые больше 10.
// Задача:
// 1. Создайте массив из как минимум 5 чисел.
// 2. Напишите цикл, который выводит на экран только те числа, которые больше 10.
// Подсказка:
// Используйте цикл foreach и оператор сравнения > .

$nums = [10, 2, 13, 4, 15, 6];
foreach ($nums as $num) {
    if ($num > 10) {
        echo $num . " ";
    }
}
echo "\n";

// Задача 5: Работа с массивами функций
// Создайте массив чисел и посчитайте их сумму.
// Задача:
// 1. Создайте массив из 5 чисел.
// 2. Используйте встроенную функцию PHP для нахождения суммы всех чисел.
// Подсказка:
// PHP имеет встроенную функцию array_sum() для суммирования элементов массива.

$nums = [10, 2, 13, 4, 15, 6];
echo array_sum($nums) . "\n";

// Задача 6: Учет товаров в магазине
// Вам необходимо создать систему учета товаров в магазине. Каждый товар должен храниться
// в виде ассоциативного массива с ключами:
// name — название товара
// price — цена товара
// quantity — количество на складе
// Задача:
// 1. Создайте массив товаров (как минимум 5 товаров).
// 2. Напишите функцию, которая выводит список всех товаров с их названиями и ценами.
// 3. Напишите функцию, которая добавляет новый товар в массив.
// 4. Напишите функцию, которая обновляет количество товара на складе.
// Подсказка:
// Используйте ассоциативные массивы для хранения информации о каждом товаре. Внутри
// функций манипулируйте массивами с товарами через циклы и ключи.

function printProducts($products) {
    foreach ($products as $product) {
        echo $product['name'] . " стоит " . $product['price'] . " руб.\n";
    }
}

function addProduct(&$products, $name, $price, $quantity) {
    $products[] = [
        'name' => $name,
        'price' => $price,
        'quantity' => $quantity
    ];
}

function updateQuantity(&$products, $name, $quantity) {
    foreach ($products as &$product) {
        if ($product['name'] === $name) {
            $product['quantity'] = $quantity;
            break;
        }
    }
    print_r($products);
}

$products = [
    [
        'name' => 'Яблоко',
        'price' => 50,
        'quantity' => 100
    ],
    [
        'name' => 'Банан',
        'price' => 30,
        'quantity' => 150
    ],
    [
        'name' => 'Апельсин',
        'price' => 60,
        'quantity' => 80
    ],
    [
        'name' => 'Груша',
        'price' => 40,
        'quantity' => 120
    ],
    [
        'name' => 'Киви',
        'price' => 70,
        'quantity' => 60
    ]
];

printProducts($products);
addProduct($products, 'Персик', 80, 50);
printProducts($products);
updateQuantity($products, 'Банан', 200);

// Задача 7: Расчет среднего балла студентов
// У вас есть массив студентов, каждый студент представлен в виде ассоциативного массива
// с полями:
// name — имя студента
// grades — массив оценок студента
// Задача:
// 1. Создайте массив из как минимум 3 студентов.
// 2. Напишите функцию, которая выводит средний балл каждого студента.
// 3. Напишите функцию, которая выводит имя студента с самым высоким средним баллом.
// Подсказка:
// Используйте функции для расчета среднего значения элементов массива. Для поиска
// студента с лучшими оценками можно использовать переменные для сравнения.

function bestAvgScore($avgScoreArr) {
    $highScore = 0;
    $student = "";
    foreach ($avgScoreArr as $name => $avgScore) {
        if ($avgScore > $highScore) {
            $highScore = $avgScore;
            $student = $name;
        }
    }
    echo "Имя студента с самым высоким средним баллом $highScore - $student\n";
}

function findAvgScore($students) {
    $avgScore = [];
    foreach ($students as $student) {
        $avgScore[$student['name'] ] = array_sum($student['grades']) / count($student['grades']);
    }
    foreach ($avgScore as $name => $score) {
        echo "Name: " . $name . " Avg_score: " . $score . "\n";
    }
    return $avgScore;
}

$students = [
    [
        'name' => 'Alex',
        'grades' => [4, 5, 3, 4, 5]
    ],
    [
        'name' => 'Oleg',
        'grades' => [3, 5, 5, 3, 4]
    ],
    [
        'name' => 'Inna',
        'grades' => [5, 5, 4, 4, 5]
    ],
];

$avgScoreArr = findAvgScore($students);
bestAvgScore($avgScoreArr);

// Задача 8: Поиск дубликатов в массиве
// Предположим, у вас есть массив чисел. Вам нужно найти и вывести все повторяющиеся
// числа.
// Задача:
// 1. Создайте массив с произвольными числами, в котором есть повторяющиеся элементы.
// 2. Напишите функцию, которая находит все дубликаты в массиве и выводит их.
// Подсказка:
// Можно использовать вспомогательный массив для хранения уже встреченных элементов и
// проверять, встречалось ли число ранее.

function checkDuplNums($nums) {
    $duplicates = [];
    $counts = array_count_values($nums);
    foreach ($counts as $num => $count) {
        if ($count > 1) {
            array_push($duplicates, $num);
        }
    }
    echo "Дубликаты: ";
    foreach ($duplicates as $duplicate) {
        echo $duplicate . " ";
    }
    echo "\n";
}
$nums = [10, 2, 13, 4, 15, 6, 2, 4];
checkDuplNums($nums);

// Задача 9: Объединение и сортировка массивов
// У вас есть два массива с числами. Нужно объединить их в один и отсортировать по
// возрастанию.
// Задача:
// 1. Создайте два массива с числами.
// 2. Напишите функцию, которая объединяет оба массива в один.
// 3. Напишите функцию, которая сортирует объединенный массив по возрастанию.
// Подсказка:
// PHP имеет встроенные функции для объединения массивов и сортировки, но попробуйте
// реализовать сортировку вручную через цикл для практики.

function mergeArrs($arr1, $arr2) {
    for ($i = 0; $i < count($arr2); $i++) {
        array_push($arr1, $arr2[$i]);
    }
    return $arr1;
}

function sortArr($arr) {
    for ($i = 0; $i < count($arr); $i++) {
        for ($j = 0; $j < count($arr) - 1; $j++) {
            if ($arr[$j] > $arr[$j + 1]) {
                $temp = $arr[$j];
                $arr[$j] = $arr[$j + 1];
                $arr[$j + 1] = $temp;
            }
        }
    }
    return $arr;
}

$arr1 = [10, 2, 13, 9, 15, 6, 7, 4];
$arr2 = [53, 8, 19, 33, 1];

$mergedArr = mergeArrs($arr1, $arr2);
$sortedArr = sortArr($mergedArr);
print_r($mergedArr);
print_r($sortedArr);

// Задача 10: Фильтрация массива
// У вас есть массив чисел. Вам нужно создать функцию, которая отфильтрует массив и
// вернет только четные числа.
// Задача:
// 1. Создайте массив с числами.
// 2. Напишите функцию, которая отфильтровывает все нечетные числа и возвращает
// массив только с четными числами.
// Подсказка:
// Для проверки четности числа используйте оператор % . Внутри функции можете пройтись
// по массиву с помощью цикла и проверять каждое число.

function checkEvenNum($nums) {
    $newArr = [];
    for ($i = 0; $i < count($nums); $i++) {
        if ($nums[$i] % 2 === 0) {
            array_push($newArr, $nums[$i]);
        }
    }
    return $newArr;
}
$nums = [10, 2, 13, 9, 15, 6, 7, 4];
$evenNums = checkEvenNum($nums);
print_r($evenNums);
?>